#!/bin/sh

cleanup() {
  kill `cat $LAUNCHER_PID_FILE` 2>/dev/null
  kill `cat $DISPLAY_PID_FILE`  2>/dev/null
  kill $DISPATCHER_PID          2>/dev/null
}


start_dispatcher() {
  A="./System/Services/Dispatcher"
  update_wap $A || exit 1
  node $A/main.js &
  DISPATCHER_PID="$!"
  sleep 1
}

start_launcher() {
  A="./System/Services/Launcher"
  update_wap $A || exit 1
  node $A/main.js &
  echo "$!" > $LAUNCHER_PID_FILE
}

start_display() {
  A="./System/Services/Display/Chrome"
  update_wap $A || exit 1
  node $A/main.js &
  echo "$!" > $DISPLAY_PID_FILE
}

init_xwin() {
  echo "initialize x"

  if [ -f "$HOME/.Xmodmap" ];then
    xmodmap $HOME/.Xmodmap
  fi

  xset b off
  xsetroot -solid gray
}

OS=`uname`
B=`realpath "$0"`
B=`dirname $B`

cd "$B/../../"

if [ -n "$DISPLAY" ] && [ "$OS" != "Darwin" ] ;then
  init_xwin
fi

if [ "$1" = "--safe-mode" ] ;then
  exec xterm -bg black -fg gray
fi

trap cleanup INT TERM

LAUNCHER_PID_FILE="/tmp/$$-laucher.pid"
DISPLAY_PID_FILE="/tmp/$$-display.pid"

DISPATCHER_PORT=3000
PATH="$PWD/System/bin:$PATH"
XNDE_HOME="$PWD"

export LAUNCHER_PID_FILE DISPLAY_PID_FILE DISPATCHER_PORT XNDE_HOME

## start core services
start_dispatcher
start_launcher
start_display

## make sure display and launcher are active
dispatch waitfor DISPLAY 1
dispatch waitfor LAUNCHER 1

## launch system applications
launch System/Services/FileSystem.wap
launch System/Services/SystemController.wap
launch System/Services/ConfigController.wap
dispatch waitfor CONFIG 1

## launch user applications
#launch Applications/Terminal.wap
launch System/Widgets/AppMenu.wap

wait $DISPATCHER_PID
cleanup
